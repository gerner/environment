#!/usr/bin/env ruby

require 'oj'

def descend_path(j, p)
  #negative lookbehind (google it) to allow for escaped dots in the key name
  #and also unescape them
  p.split(/(?<!\\)\./).map { |k| k.gsub('\.', '.') }.each do |k|
    raise "no key #{k} found in input" unless j[k]
    j = j[k]
  end
  if j.kind_of? Array
    return j
  else
    return [j]
  end
end

def header_fields(j)
  @header_fields ||= j.first.keys
end

def print_row(j)
  #puts header_fields(j).map { |h| j[h] }.join("\t")
  non_array_cols = []
  header_fields(j).map { |h| non_array_cols << j[h] unless j[h].kind_of? Hash }.map { |el| (el.nil?) ? "TOTAL" : el }
  puts non_array_cols.join("\t")
  #first_array_col = j[header_fields(j).find { |h| j[h].kind_of? Hash } ]
  #first_array_col.keys.each { |el| puts "#{non_array_cols.join("\t")}\t#{el}" }
end

def print_rows(rows)
  rows.each do |j|
    print_row(j)
  end
end

input_object = Oj::load(STDIN.read, bigdecimal_load: :float)
#input_object = Oj::load(File.read('/tmp/uopapps.json'), bigdecimal_load: :float)


if ARGV.length > 0
  puts header_fields(descend_path(input_object, ARGV[0])).join("\t")
  ARGV.each do |p|
    j = descend_path(input_object, p)
    print_rows(j)
  end
else
  puts header_fields(input_object).join("\t")
  print_rows(input_object)
end

