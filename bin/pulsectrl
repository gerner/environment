#!/bin/bash

set -eu -o pipefail

###############################################################################
# script for doing stuff with pulse audio
# lets you get and set the default pulse input/output devices
# see this pulse audio wiki page for more info:
# https://wiki.archlinux.org/title/PulseAudio/Examples#Set_default_input_source
###############################################################################

SCRIPTNAME=$(basename $0)
set -- `getopt -n$0 -u -a --longoptions="help rnnoise::" "h" "$@"`

usage="$SCRIPTNAME [option ...] command

commands:
  info                show info about devices
  source              set defualt source
  sink                set efault sink
  apploop [loopname]  set up a sink that forwards into a sink named loopname
                        e.g. for streaming app audio
  monitor|mon         set up a loopback monitor from a selected source to a
                        selected sink, keeps trunning, ctrl-c or exit tears
                        down the loopback
  rnnoise [chainname] set up rnnoise filter, creating a new denoised source

options:
  --source               set the default source
  --sink                 set the default sink
  --rnnoise  [settings]  set rnnoise settings default "50,20,0,0,0", settings:
                           VAD Threshold (%),
                           VAD Grace Period (ms),
                           Retroactive VAD Grace Period (ms),
                           Placeholder1, Placeholder2
  -h, --help             show this help message"


# first get some info

SOURCE_FILE=$(mktemp --tmpdir pulsesourceXXXXX)
SINK_FILE=$(mktemp --tmpdir pulsesinkXXXXX)

RNNOISE_PATH="/home/nick/.local/share/rnnoise/linux-rnnoise/ladspa/librnnoise_ladspa.so"
rnnoise_settings="50,20,0,0,0"

trap 'rm -f $SOURCE_FILE $SINK_FILE' EXIT

pacmd list-sources | grep -e 'index:' -e device.description -e 'name:' | awk '/^ *[*] index:/ {is_default=1} /^ *index:/ {is_default=0} /name:/ {match($0, /name: <([^>]*)>/, m); name=m[1];} /device.description/ { match($0, /device.description = "(.*)"$/, m); description=m[1]; printf("%s\t%s\t%d\n", name, description, is_default);}' > $SOURCE_FILE

pacmd list-sinks | grep -e 'index:' -e device.description -e 'name:' | awk '/^ *[*] index:/ {is_default=1} /^ *index:/ {is_default=0} /name:/ {match($0, /name: <([^>]*)>/, m); name=m[1];} /device.description/ { match($0, /device.description = "(.*)"$/, m); description=m[1]; printf("%s\t%s\t%d\n", name, description, is_default);}' > $SINK_FILE

while [ $# -gt 0 ]; do
    case $1 in
        --rnnoise)
            shift
            rnnoise_settings=$1
            ;;
        -h|--help)
            shift
            echo "${usage}"
            exit 0
            ;;
        --) shift;break;;
    esac
    shift
done

if [ $# -eq 0 ] || [[ $1 == "info" ]]; then
    echo "default source:"
    echo -n "  "
    cat $SOURCE_FILE | awk -F\\t '$3 == 1' | cut -f 2

    echo "default sink:"
    echo -n "  "
    cat $SINK_FILE | awk -F\\t '$3 == 1' | cut -f 2

    echo ""

    old_ifs="$IFS"
    IFS=$'\n'

    if [[ -z "$(cat $SOURCE_FILE | awk -F\\t '$3 == 0' | cut -f 2)" ]]; then
        echo "no other sources"
    else
        echo "other sources:"
        for x in $(cat $SOURCE_FILE | awk -F\\t '$3 == 0' | cut -f 2); do
            echo "  ${x}"
        done
    fi

    if [[ -z "$(cat $SINK_FILE | awk -F\\t '$3 == 0' | cut -f 2)" ]]; then
        echo "no other sinks"
    else
        echo "other sinks:"
        IFS=$'\n'
        for x in $(cat $SINK_FILE | awk -F\\t '$3 == 0' | cut -f 2); do
            echo "  ${x}"
        done
    fi
    IFS="$old_ifs"

elif [[ $1 == "source" ]]; then
    echo "default source:"
    cat $SOURCE_FILE | grep "1$" | cut -f2
    echo "$(cat $SOURCE_FILE | wc -l) available sources"
    echo ""

    old_ifs="$IFS"
    IFS=$'\n'
    select SOURCE_DESC in $(cat $SOURCE_FILE | cut -f2); do
        if [[ -z "$SOURCE_DESC" ]]; then
            echo "not a valid option"
            exit 1
        fi
        # now set the default source to the line matching $REPLY
        SELECTED_SOURCE=$(cat $SOURCE_FILE | tail -n+$REPLY | head -n1 | cut -f1)
        pacmd "set-default-source $SELECTED_SOURCE"
        echo ""
        echo "default source set to $SELECTED_SOURCE"
        echo "aka $SOURCE_DESC"
        break;
    done
    IFS="$old_ifs"
elif [[ $1 == "sink" ]]; then
    echo "default sink:"
    cat $SINK_FILE | grep "1$" | cut -f2
    echo "$(cat $SINK_FILE | wc -l) available sinks"
    echo ""

    old_ifs="$IFS"
    IFS=$'\n'
    select SINK_DESC in $(cat $SINK_FILE | cut -f2); do
        if [[ -z "$SINK_DESC" ]]; then
            echo "not a valid option"
            exit 1
        fi
        # now set the default source to the line matching $REPLY
        SELECTED_SINK=$(cat $SINK_FILE | tail -n+$REPLY | head -n1 | cut -f1)
        pacmd "set-default-sink $SELECTED_SINK"
        echo ""
        echo "default sink set to $SELECTED_SINK"
        echo "aka $SINK_DESC"
        break;
    done
    IFS="$old_ifs"
elif [[ $1 == "apploop" ]]; then
    # set up a sink that apps can write to
    # all of this audio is then available from a coresponding source
    #   pulseaudio actually does this for free by creating a monitor source
    #   those sources don't show up in apps, so this creates a source that
    #   will show up and pipes the monitor source into this new source
    #   you can get the same effect by forcing your app to use the monitor
    #   source, e.g. via pavucontrol in the recording tab
    if [[ $# -gt 1 ]]; then
        loop_name=$2
    else
        loop_name=apploop
    fi
    pactl load-module module-null-sink sink_name=${loop_name}
    pacmd update-sink-proplist ${loop_name} device.description=${loop_name}
    pactl load-module module-remap-source source_name=${loop_name}.source master=${loop_name}.monitor
    pacmd update-source-proplist ${loop_name}.source device.description=${loop_name}.source
elif [[ $1 == "monitor" ]] || [[ $1 == "mon" ]]; then
    # set up a loopback from source to sink as long as we're running

    old_ifs="$IFS"
    IFS=$'\n'
    echo "send which source?"
    select SOURCE_DESC in $(cat $SOURCE_FILE | cut -f2); do
        if [[ -z "$SOURCE_DESC" ]]; then
            echo "not a valid option"
            exit 1
        fi
        SELECTED_SOURCE=$(cat $SOURCE_FILE | tail -n+$REPLY | head -n1 | cut -f1)
        break
    done

    echo "send to which sink?"
    select SINK_DESC in $(cat $SINK_FILE | cut -f2); do
        if [[ -z "$SINK_DESC" ]]; then
            echo "not a valid option"
            exit 1
        fi
        # now set the default source to the line matching $REPLY
        SELECTED_SINK=$(cat $SINK_FILE | tail -n+$REPLY | head -n1 | cut -f1)
        break;
    done
    IFS="$old_ifs"

    MODULE_ID=$(pactl load-module module-loopback source=${SELECTED_SOURCE} sink=${SELECTED_SINK})
    echo "monitor loopback is module ${MODULE_ID}"

    function cleanup_monitor {
        echo "cleaning up monitor loopback"
        pacmd unload-module "${MODULE_ID}"
        STOP_MONITOR=1
    }

    # run until ctrl-c or exit
    STOP_MONITOR=""
    trap 'STOP_MONITOR=1' SIGINT
    trap 'cleanup_monitor' EXIT

    while [[ -z "${STOP_MONITOR}" ]]; do
        sleep 0.25
    done
elif [[ $1 == "rnnoise" ]]; then
    # name the resulting sink and corresponding source
    if [[ $# -gt 1 ]]; then
        chain_name=$2
    else
        chain_name="denoised"
    fi

    chainfile="/tmp/rnnoise.${chain_name}"

    # first check if a chain already exists with that name
    if (pacmd list-modules | grep "${chain_name}_out" > /dev/null); then
        echo "an rnnoise chain already exists with that name"
        read -r -p "Would you like to delete it? [Y/n]" response
        if [[ "$response" == "Y" ]]; then
            echo "deleteing..."
            if ! [ -s "${chainfile}" ]; then
                echo "chain metadata file \"${chainfile}\" does not exist!"
                exit 1
            fi
            for module_id in $(cat ${chainfile}); do
                echo $module_id
            done
            echo "done"
        fi
        exit 0
    fi

    # choose source
    echo "source:"
    old_ifs="$IFS"
    IFS=$'\n'
    select SOURCE_DESC in $(cat $SOURCE_FILE | cut -f2); do
        if [[ -z "$SOURCE_DESC" ]]; then
            echo "not a valid option"
            exit 1
        fi
        SELECTED_SOURCE=$(cat $SOURCE_FILE | tail -n+$REPLY | head -n1 | cut -f1)
        break
    done
    IFS="$old_ifs"

    # end of the chain
    MODULE_NULLSINK_ID=$(pactl load-module module-null-sink sink_name="${chain_name}_out" rate=48000)
    if [[ -z "${MODULE_NULLSINK_ID}" ]]; then
        echo "could not create null sink"
        exit 1
    fi
    echo "null sink id ${MODULE_NULLSINK_ID}"
    pacmd update-sink-proplist "${chain_name}_out" device.description="${chain_name}_out"

    # create a source that corresponds to the end of the chain (that will show up in apps since the auto created monitor source will not)
    MODULE_REMAP_ID=$(pactl load-module module-remap-source source_name="${chain_name}.source" master="${chain_name}_out.monitor")
    if [[ -z "${MODULE_REMAP_ID}" ]]; then
        echo "could not create remap"
        pacmd unload-module "${MODULE_NULLSINK_ID}"
        exit 1
    fi
    echo "remap id ${MODULE_REMAP_ID}"
    pacmd update-source-proplist "${chain_name}.source" device.description="${chain_name}.source"

    # create the rnnoise sink that writes to the end of the chain
    MODULE_RNNOISE_ID=$(pactl load-module module-ladspa-sink sink_name="${chain_name}_in" sink_master="${chain_name}_out" label=noise_suppressor_mono plugin="${RNNOISE_PATH}" control=${rnnoise_settings})
    if [[ -z "${MODULE_RNNOISE_ID}}" ]]; then
        echo "could not create rnnoise"
        pacmd unload-module "${MODULE_NULLSINK_ID}"
        pacmd unload-module "${MODULE_REMAP_ID}"
        exit 1
    fi
    echo "rnnoise id ${MODULE_RNNOISE_ID}"

    # hook the source up to the rnnoise sink
    MODULE_LOOPBACK_ID=$(pactl load-module module-loopback source="${SELECTED_SOURCE}" sink="${chain_name}_in" channels=1 source_dont_move=true sink_dont_move=true)
    if [[ -z "${MODULE_LOOPBACK_ID}" ]]; then
        echo "could not create loopback"
        pacmd unload-module "${MODULE_NULLSINK_ID}"
        pacmd unload-module "${MODULE_REMAP_ID}"
        pacmd unload-module "${MODULE_RNNOISE_ID}"
        exit 1
    fi
    echo "loopback id ${MODULE_LOOPBACK_ID}"

    echo "$MODULE_NULLSINK_ID" > ${chainfile}
    echo "$MODULE_REMAP_ID" >> ${chainfile}
    echo "$MODULE_RNNOISE_ID" >> ${chainfile}
    echo "$MODULE_LOOPBACK_ID" >> ${chainfile}

    echo "chain info saved to ${chainfile}"
fi
