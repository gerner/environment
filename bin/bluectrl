#!/bin/bash
set -eu -o pipefail

###############################################################################
# script for doing stuff with bluetooth
# simplifies the process of connecting and disconnected bluetooth devices
###############################################################################

SCRIPTNAME=$(basename $0)

SCANFILE=$(mktemp --tmpdir bluescanXXXXX)
RAWIDFILE=$(mktemp --tmpdir blueidXXXXX)
IDFILE=$(mktemp --tmpdir blueidXXXXX)
PAIREDFILE=$(mktemp --tmpdir bluepairedXXXXX)
FIFOFILE=$(mktemp -u)
mkfifo -m 600 "${FIFOFILE}"

trap 'rm -f $SCANFILE $RAWIDFILE $IDFILE $PAIREDFILE $FIFOFILE' EXIT

SCANTIME=4

function printusage {
    echo "usage $SCRIPTNAME [<option> ...] command"
    echo ""
    echo "commands:"
    echo "    info                  info about connected/paired devices"
    echo "    con|connect           pair/connect a device"
    echo "    dis|disconnect        disconnect a connected device"
    echo "    disall|disconnectall  disconnect all connected devices"
    echo "    trust                 trust a device"
    echo "    reset                 reset bluetooth kernel module"
    echo ""
    echo "options:"
    echo "    --scan [n]  do a scan for n seconds (deafult 4) for devices"
}

function check_connected {
    local tries=0
    local max_tries=15
    local sleep_time="0.3"
    local err=1
    while [[ $tries -lt $max_tries ]]; do
        if bluetoothctl info $1 | grep 'Connected: yes' > /dev/null; then
            err=0
            break
        fi
        tries=$((${tries}+1))
        echo -n "."
        sleep 1
    done
    return $err
}

set -- `getopt -n$0 -u -a --longoptions="scan help" "h" "$@"`

while [ $# -gt 0 ]; do
    case $1 in
        --scan)
            if [ $# -gt 1 ] && echo "$2" | grep -E "^[0-9]+$" > /dev/null; then
                SCANTIME=$2
                shift
            fi
            shift
            # get devices via a scan
            echo -n "scanning devices..."
            echo -e "menu scan\nclear\n" | bluetoothctl > /dev/null

            # we use a FIFO here, and bind fd 3 to it, in order to keep
            # bluetoothctl live while we do the scan
            bluetoothctl < $FIFOFILE > $SCANFILE &
            blue_pid="$!"
            # do the scan and get devices and then turn scanning off
            exec 3>$FIFOFILE
            echo "scan on" > $FIFOFILE
            sleep $SCANTIME
            echo "devices" > $FIFOFILE
            # leaving scan on seems to cause issues keeping devices connected
            echo "scan off" > $FIFOFILE
            if ps -p $blue_pid > /dev/null; then
                kill $blue_pid || true
            fi
            sleep 0.1
            exec 3>&-
            echo "done."
            #cat $SCANFILE | wc -l
            #cat $SCANFILE | grep "Device" | awk '{print $3}' | sort -u > $RAWIDFILE || true
            #echo $SCANFILE
            #echo $RAWIDFILE
            #exit 1
            ;;
        --help|-h)
            shift
            printusage
            exit 0
            ;;
        --) shift;break;;
    esac
    shift
done

# get known devices (should be updated from scan if we did one)
bluetoothctl devices > $SCANFILE
cat $SCANFILE | grep "Device" | awk '{print $2}' | sort -u > $RAWIDFILE || true


# get devices
if [[ -z "$(cat $RAWIDFILE)" ]]; then
    echo "no bluetooth devices found."
    exit 1
fi

for x in $(cat $RAWIDFILE); do
    bluetoothctl info $x | awk '/Device/ {id=$2;} /Alias:/ {match($0, /Alias: (.*)/, m);name=m[1]} /Paired:/ { paired=$2} /Connected:/ {connected=$2} /Trusted:/ { trusted=$2} END {printf("%s\t%s\t%s\t%s\t%s\n", id, paired, connected, trusted, name)}' >> $IDFILE
done

bluetoothctl devices Paired | awk '{match($0, /Device ([^ ]+) (.*)$/, m); printf("%s\t%s\n", m[1], m[2])}' > $PAIREDFILE


# do stuff
if [ $# -eq 0 ] || [[ $1 == "info" ]]; then
    if [ -z "$(cat $IDFILE | awk '$3 == "yes"' | cut -f 1,4,5)" ]; then
        echo "no connected devices"
    else
        echo "connected devices:"
        OLDIFS="${IFS}"
        IFS=$'\n'
        cat $IDFILE | awk -F\\t '$3 == "yes" { printf("    %s\t%s", $1,$5);if ($4 == "yes") { print "\t(trusted)"} else {print ""} }'
        IFS="$OLDIFS"
        echo ""
    fi
    if [ -z "$(cat $IDFILE | awk '$2 == "yes" && $3 == "no" ' | cut -f 1,4,5)" ]; then
        echo "no paired but unconnected devices"
    else
        echo "paired but unconnected devices:"
        OLDIFS="${IFS}"
        IFS=$'\n'
        cat $IDFILE | awk -F\\t '$2 == "yes" && $3 == "no" { printf("    %s\t%s", $1,$5); if ($4 == "yes") { print "\t(trusted)"} else {print ""}}'
        IFS="$OLDIFS"
        echo ""
    fi

    if [ -z "$(cat $IDFILE | awk '$2 == "no"' | cut -f 1,5)" ]; then
        echo "no unpaired devices"
    else
        echo "unpaired devices:"
        OLDIFS="${IFS}"
        IFS=$'\n'
        for x in $(cat $IDFILE | awk '$2 == "no"' | cut -f 1,5); do
            echo "    ${x}"
        done
        IFS="$OLDIFS"
        echo ""
    fi

elif [[ "$1" == "con" ]] || [[ "$1" == "connect" ]]; then

    if [ -z "$(cat $IDFILE | awk '$3 == "no"' | cut -f 5)" ]; then
        echo "no unconnected devices. try --scan"
        exit 0
    fi

    echo "connect device:"
    OLDIFS="${IFS}"
    IFS=$'\n'
    select DEVICE in $(cat $IDFILE | awk '$3 == "no"' | cut -f 5); do
        break
    done
    IFS="$OLDIFS"

    chosen_id=$(cat $IDFILE | awk '$3 == "no"' | tail -n+"$REPLY" | head -n1 | cut -f1)
    if cat $PAIREDFILE | cut -f 1 | grep $chosen_id > /dev/null; then
        echo -n "already paired. connecting ${DEVICE}..."
        if ! bluetoothctl connect $chosen_id > /dev/null; then
            # sometimes connecting reports as failed, but actually succeeds
            if ! check_connected "$chosen_id"; then
                echo "could not connect"
                exit 1
            fi
        fi
        echo "done."
    else
        echo -n "not paired, pairing and connecting ${DEVICE}..."
        if ! bluetoothctl pair $chosen_id > /dev/null; then
            # sometimes pairing reports as failed, but actually succeeds
            if ! check_connected "$chosen_id"; then
                echo "could not connect"
                exit 1
            fi
        fi
        echo "done."
    fi

elif [[ "$1" == "dis" ]] || [[ "$1" == "disconnect" ]]; then

    if [ -z "$(cat $IDFILE | awk '$3 == "yes"' | cut -f 5)" ]; then
        echo "no connected devices."
        exit 0
    fi

    echo "disconnect device:"
    OLDIFS="${IFS}"
    IFS=$'\n'
    select DEVICE in $(cat $IDFILE | awk '$3 == "yes"' | cut -f 5); do
        break
    done
    IFS="$OLDIFS"

    chosen_id=$(cat $IDFILE | awk '$3 == "yes"' | tail -n+"$REPLY" | head -n1 | cut -f1)
    echo -n "disconnecting $DEVICE..."
    bluetoothctl disconnect $chosen_id > /dev/null
    echo "done."

elif [[ "$1" == "disall" ]] || [[ "$1" == "disconnectall" ]]; then
    for x in $(cat $IDFILE | awk '$3 == "yes"' | cut -f 5); do
        bluetoothctl disconnect $x
    done

elif [[ "$1" == "trust" ]]; then
    if [ -z "$(cat $IDFILE | awk '$4 == "no"' | cut -f 5)" ]; then
        echo "no paired, but untrusted devices."
        exit 0
    fi

    echo "trust device:"
    OLDIFS="${IFS}"
    IFS=$'\n'
    select DEVICE in $(cat $IDFILE | awk '$4 == "no"' | cut -f 5); do
        break
    done
    IFS="$OLDIFS"

    chosen_id=$(cat $IDFILE | awk '$4 == "no"' | tail -n+"$REPLY" | head -n1 | cut -f1)
    if ! bluetoothctl trust $chosen_id > /dev/null; then
        echo "failed to trust $DEVICE"
        exit 1
    fi
    echo "done"

elif [[ "$1" == "untrust" ]]; then
    if [ -z "$(cat $IDFILE | awk '$4 == "yes"' | cut -f 5)" ]; then
        echo "no trusted devices."
        exit 0
    fi

    echo "trust device:"
    OLDIFS="${IFS}"
    IFS=$'\n'
    select DEVICE in $(cat $IDFILE | awk '$4 == "yes"' | cut -f 5); do
        break
    done
    IFS="$OLDIFS"

    chosen_id=$(cat $IDFILE | awk '$4 == "yes"' | tail -n+"$REPLY" | head -n1 | cut -f1)
    if ! bluetoothctl untrust $chosen_id > /dev/null; then
        echo "failed to untrust $DEVICE"
        exit 1
    fi
    echo "done"

elif [[ "$1" == "reset" ]]; then
    # sometimes bluetooth gets into a bad state
    # this lets us completely reset it
    # see https://askubuntu.com/questions/1340713/bluetooth-service-failed-to-set-mode
    sudo hciconfig hci0 down  # Close HCI device.
    sudo rmmod btusb          # Remove btusb module from the kernel
    sudo modprobe btusb       # Add it back
    sudo hciconfig hci0 up    # Open and initialize HCI device
    # bluetooth.service should be running at this point
    if ! systemctl statu bluetooth | grep Running > /dev/null; then
        echo "bluetooth service not running!"
        exit 1
    fi
else
    echo "unknown command '$1'"
    exit 1
fi

