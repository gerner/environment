#!/bin/bash
set -e -u -o pipefail

BATTERY_CRITICAL_THRESHOLD=10
battery_critical=0

SCRIPTNAME=$0
set -- `getopt -n$0 -u -a --longoptions="start stop" "xc" "$@"`

use_colors=""
use_xsetroot=""

while [ $# -gt 0 ]; do
    case $1 in
        --start) 
            shift
            echo "starting $SCRIPTNAME $@"
            start-stop-daemon --start -p /tmp/statusbar.pid -b -m -x $SCRIPTNAME -- `echo $@ | sed 's/ -- / /'`
            exit $?
            ;;
        --stop)
            start-stop-daemon --stop -p /tmp/statusbar.pid
            exit $?
            ;;
        -x) use_xsetroot=1;;
        -c) use_colors=1;;
        --) shift;break;;
    esac
    shift
done

function get_c {
    if [ -z $use_colors ]; then
        true
    elif [ $# -lt 2 ] || [ -z "$2" ]; then
        echo "\\x01"
    else
        num=$1
        dir=$2
        i=1
        shift
        shift
        until [ $# -eq 0 ] || [ ${num/.*} $dir $1 ]; do
            shift
            i=$(($i+1))
        done
        echo "\\x0$i"
    fi
}

function format_n {
    printf "$(get_c $@)%2s$(get_c)" $1
}

function format_n_long {
    padding=$1
    shift
    printf "$(get_c $@)%${padding}s$(get_c)" $1
}

function format_h {
    if [ -z $1 ]; then
        num_str="0"
    elif [ $1 -ge $((2*1024*1024*1024)) ]; then
        num_str="$(($1/1024/1024/1024))"
        unit=G
    elif [ $1 -ge $((2*1024*1024)) ]; then
        num_str="$(($1/1024/1024))"
        unit=M
    elif [ $1 -ge 8096 ]; then
        num_str="$(($1/1024))"
        unit=K
    else
        num_str="$1"
        unit=B
    fi

    printf "$(get_c $@)%4s$(get_c)%1s" $num_str $unit
}

if [ $# -eq 0 ]
then
    interval=1
else
    interval=$1
fi
while true; do

    disk_before=(`cat /proc/diskstats | awk '{ if($2==0) { r+=$6;w+=$10 } } END {printf("%d %d\n", r/4*1024, w/4*1024)}'`)
    net_before=(`cat /proc/net/dev | tail -n+3 | tr ':' ' ' | awk '{r+=$2;w+=$10} END {printf("%d %d\n", r, w)}'`)
    cpu_before=(`cat /proc/stat | head -n1`)

    sleep $interval

    disk_after=(`cat /proc/diskstats | awk '{ if($2==0) { r+=$6;w+=$10 } } END {printf("%d %d\n", r/4*1024, w/4*1024)}'`)
    net_after=(`cat /proc/net/dev | tail -n+3 | tr ':' ' ' | awk '{r+=$2;w+=$10} END {printf("%d %d\n", r,w)}'`)
    cpu_after=(`cat /proc/stat | head -n1`)

    cpu_freq=`cat /proc/cpuinfo | grep "cpu MHz" | awk '{s+=$NF;n+=1} END {print int(s/n)}'`
    #mem[0] used (excluding buffers and cached)
    #mem[1] free
    #mem[2] buffers
    #mem[3] cache
    #mem[4] available
    #mem: used=total-free-buff-cache free buff cache
    mem=($(cat /proc/meminfo | gawk '/^MemTotal:/ { total=$2*1024 } /^MemFree:/ { free=$2*1024 } /^Buffers:/ { buffers=$2*1024 } /^Cached:/ { cached=$2*1024 } /^MemAvailable:/ { available=$2*1024} END { printf("%d %d %d %d %d", total-free-buffers-cached, free, buffers, cached, available) }'))
    #cpu=(`vmstat | tail -n1 | awk '{print $13,$14,$15,$16}'`)
    cpu_usr=$(( (${cpu_after[1]} - ${cpu_before[1]}) + (${cpu_after[2]} - ${cpu_before[2]})))
    cpu_sys=$(( ${cpu_after[3]} - ${cpu_before[3]} ))
    cpu_idle=$(( ${cpu_after[4]} - ${cpu_before[4]} ))
    cpu_io=$(( ${cpu_after[5]} - ${cpu_before[5]} ))
    cpu_total=$(( $cpu_usr + $cpu_sys + $cpu_idle + $cpu_io ))

    volume=$(amixer -D pulse get Master | grep -o '\[[0-9]*%' | tr -d '[%' | awk '{v+=$1;n+=1} END {print int(v/n)}')

    batt=(`acpitool -B | tr -d ',' | awk '/Remaining capacity/ { sub("%", "", $6); print $6} /Charging state/ { print $NF }'`)

    ssid=`iwgetid -r` || true
    wifiqual=`iwconfig 2> /dev/null | grep -o "Link Quality=[0-9]*/[0-9]*" | grep -o "[0-9]*/[0-9]*"` || true
    if [ ! -z "$wifiqual" ]; then
        wifiqual=$((100 * $wifiqual))
    fi

    #pick an ip address to display, but not self assigned local address
    ipaddr=`hostname  -I | tr ' ' '\n' | grep -v '^169.254' | grep -v '^$' | head -n1` || true

    if [ "${batt[1]}" == "Discharging" ]
    then
        charge="-"
    elif [ ${batt[1]} == "Charging" ]
    then
        charge="+"
    else
        charge="="
    fi

    statusline=$( if [ ! -z "$ssid" ]
    then
        printf "%s %3s%%|" "$ssid" $wifiqual
    elif [ ! -z "$ipaddr" ]; then
        printf "%s %s|" $ipaddr
    fi
        printf "C: %sMHz|C: %s|D: %s %s|N: %s %s|M: %s %s|V: %s%%|B: %3s%% %s| %s" \
            "$(format_n_long 4 $cpu_freq -gt 1600 1200 1000)" \
            "$(format_n $(( ($cpu_usr+${cpu_sys}+${cpu_io})*100/$cpu_total )) -lt 5 20 60)" \
            "$(format_h $(( (${disk_after[0]} - ${disk_before[0]})/$interval )) -gt 4096000000 1024000 1024 1)" \
            "$(format_h $(( (${disk_after[1]} - ${disk_before[1]})/$interval )) -gt 4096000000 1024000 1024 1)" \
            "$(format_h $(( (${net_after[0]} - ${net_before[0]})/$interval )) -gt 4096000000 1024000 1024 1)" \
            "$(format_h $(( (${net_after[1]} - ${net_before[1]})/$interval )) -gt 4096000000 1024000 1024 1)" \
            "$(format_h ${mem[0]} -lt 1073741824 5368709120 7516192768)" \
            "$(format_h ${mem[4]} -gt 12884901888 8589934592 2147483648)" \
            "${volume}" \
            "$(format_n ${batt[0]} -gt 99 60 30)" ${charge} \
            "`date +'%a %b %d %H:%M'`" )

    if [ "${batt[0]/.*}" -lt "$BATTERY_CRITICAL_THRESHOLD" ] && [ "${batt[1]}" != "Charging" ]; then
        if [ "0" -eq "$battery_critical" ]; then
            statusline="\x04XXXXXXXXXXXXXX--------------BATTERY ${batt[0]} CRITICAL----------------XXXXXXXXXXXXXX\x01"
            battery_critical=1
        else
            battery_critical=0
        fi
    fi

    if [ -z $use_xsetroot ]; then
        echo "$statusline"
    else
        xsetroot -name "$(echo -e "$statusline")"
    fi
done
